
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OwnerScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  phone: 'phone',
  phoneVerified: 'phoneVerified',
  password: 'password',
  salt: 'salt',
  lastLogin: 'lastLogin',
  lastIp: 'lastIp',
  status: 'status',
  timezone: 'timezone',
  locale: 'locale',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SchoolScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  shortName: 'shortName',
  code: 'code',
  motto: 'motto',
  about: 'about',
  email: 'email',
  phone: 'phone',
  fax: 'fax',
  website: 'website',
  establishedDate: 'establishedDate',
  principal: 'principal',
  vicePrincipal: 'vicePrincipal',
  country: 'country',
  state: 'state',
  city: 'city',
  address: 'address',
  postalCode: 'postalCode',
  latitude: 'latitude',
  longitude: 'longitude',
  logo: 'logo',
  coverImage: 'coverImage',
  themeColor: 'themeColor',
  timezone: 'timezone',
  locale: 'locale',
  currency: 'currency',
  status: 'status',
  ownerId: 'ownerId',
  academicSessionId: 'academicSessionId',
  currentTermId: 'currentTermId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  username: 'username',
  email: 'email',
  emailVerified: 'emailVerified',
  phone: 'phone',
  phoneVerified: 'phoneVerified',
  password: 'password',
  salt: 'salt',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  displayName: 'displayName',
  gender: 'gender',
  birthDate: 'birthDate',
  avatar: 'avatar',
  coverImage: 'coverImage',
  bio: 'bio',
  role: 'role',
  status: 'status',
  lastLogin: 'lastLogin',
  lastIp: 'lastIp',
  timezone: 'timezone',
  locale: 'locale',
  metadata: 'metadata',
  schoolId: 'schoolId',
  createdByOwnerId: 'createdByOwnerId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AcademicSessionScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  isCurrent: 'isCurrent',
  description: 'description',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TermScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  type: 'type',
  startDate: 'startDate',
  endDate: 'endDate',
  isCurrent: 'isCurrent',
  academicSessionId: 'academicSessionId',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  code: 'code',
  description: 'description',
  headId: 'headId',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  code: 'code',
  level: 'level',
  section: 'section',
  roomNumber: 'roomNumber',
  capacity: 'capacity',
  classTeacherId: 'classTeacherId',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SubjectScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  code: 'code',
  description: 'description',
  creditHours: 'creditHours',
  isElective: 'isElective',
  departmentId: 'departmentId',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TimetableScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  day: 'day',
  period: 'period',
  startTime: 'startTime',
  endTime: 'endTime',
  classId: 'classId',
  subjectId: 'subjectId',
  teacherId: 'teacherId',
  roomNumber: 'roomNumber',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TeacherScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  userId: 'userId',
  employeeId: 'employeeId',
  departmentId: 'departmentId',
  qualification: 'qualification',
  specialization: 'specialization',
  joiningDate: 'joiningDate',
  experience: 'experience',
  salary: 'salary',
  isClassTeacher: 'isClassTeacher',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  userId: 'userId',
  admissionNo: 'admissionNo',
  rollNo: 'rollNo',
  classId: 'classId',
  sectionId: 'sectionId',
  parentId: 'parentId',
  admissionDate: 'admissionDate',
  bloodGroup: 'bloodGroup',
  nationality: 'nationality',
  religion: 'religion',
  caste: 'caste',
  aadharNo: 'aadharNo',
  bankAccountNo: 'bankAccountNo',
  bankName: 'bankName',
  ifscCode: 'ifscCode',
  previousSchool: 'previousSchool',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  conversionDate: 'conversionDate',
  convertedFromCustomerId: 'convertedFromCustomerId'
};

exports.Prisma.ParentScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  userId: 'userId',
  occupation: 'occupation',
  annualIncome: 'annualIncome',
  education: 'education',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  userId: 'userId',
  employeeId: 'employeeId',
  departmentId: 'departmentId',
  designation: 'designation',
  joiningDate: 'joiningDate',
  salary: 'salary',
  accountNumber: 'accountNumber',
  bankName: 'bankName',
  ifscCode: 'ifscCode',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SectionScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  classId: 'classId',
  teacherId: 'teacherId',
  capacity: 'capacity',
  roomNumber: 'roomNumber',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ExamScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  code: 'code',
  type: 'type',
  startDate: 'startDate',
  endDate: 'endDate',
  description: 'description',
  totalMarks: 'totalMarks',
  passingMarks: 'passingMarks',
  termId: 'termId',
  classId: 'classId',
  subjectId: 'subjectId',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.GradeScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  examId: 'examId',
  studentId: 'studentId',
  subjectId: 'subjectId',
  marks: 'marks',
  grade: 'grade',
  remarks: 'remarks',
  isAbsent: 'isAbsent',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ExamTimetableScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  examId: 'examId',
  subjectId: 'subjectId',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  roomNumber: 'roomNumber',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  date: 'date',
  status: 'status',
  remarks: 'remarks',
  studentId: 'studentId',
  teacherId: 'teacherId',
  staffId: 'staffId',
  classId: 'classId',
  subjectId: 'subjectId',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.FeeStructureScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  classId: 'classId',
  isDefault: 'isDefault',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.FeeItemScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  feeStructureId: 'feeStructureId',
  name: 'name',
  amount: 'amount',
  isOptional: 'isOptional',
  dueDate: 'dueDate',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  amount: 'amount',
  discount: 'discount',
  fine: 'fine',
  total: 'total',
  paymentDate: 'paymentDate',
  dueDate: 'dueDate',
  status: 'status',
  method: 'method',
  transactionId: 'transactionId',
  remarks: 'remarks',
  studentId: 'studentId',
  parentId: 'parentId',
  feeStructureId: 'feeStructureId',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  customerId: 'customerId'
};

exports.Prisma.PaymentItemScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  paymentId: 'paymentId',
  feeItemId: 'feeItemId',
  amount: 'amount',
  discount: 'discount',
  fine: 'fine',
  total: 'total',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PayrollScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  staffId: 'staffId',
  salaryMonth: 'salaryMonth',
  basicSalary: 'basicSalary',
  allowances: 'allowances',
  deductions: 'deductions',
  tax: 'tax',
  bonus: 'bonus',
  netSalary: 'netSalary',
  paymentDate: 'paymentDate',
  status: 'status',
  method: 'method',
  transactionId: 'transactionId',
  remarks: 'remarks',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.BookScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  title: 'title',
  author: 'author',
  isbn: 'isbn',
  publisher: 'publisher',
  edition: 'edition',
  subjectId: 'subjectId',
  quantity: 'quantity',
  available: 'available',
  shelfNumber: 'shelfNumber',
  price: 'price',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.BookIssueScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  bookId: 'bookId',
  studentId: 'studentId',
  staffId: 'staffId',
  issueDate: 'issueDate',
  dueDate: 'dueDate',
  returnDate: 'returnDate',
  fineAmount: 'fineAmount',
  remarks: 'remarks',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  status: 'status'
};

exports.Prisma.InventoryCategoryScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.InventoryItemScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  categoryId: 'categoryId',
  quantity: 'quantity',
  minQuantity: 'minQuantity',
  price: 'price',
  location: 'location',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  supplier: 'supplier',
  unit: 'unit'
};

exports.Prisma.InventoryLogScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  itemId: 'itemId',
  quantity: 'quantity',
  referenceId: 'referenceId',
  referenceType: 'referenceType',
  remarks: 'remarks',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  type: 'type'
};

exports.Prisma.IncomeScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  amount: 'amount',
  reference_id: 'reference_id',
  added_by: 'added_by',
  description: 'description',
  source: 'source',
  income_date: 'income_date',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.FacilityScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  type: 'type',
  capacity: 'capacity',
  location: 'location',
  description: 'description',
  status: 'status',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.FacilityBookingScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  facilityId: 'facilityId',
  bookedById: 'bookedById',
  startTime: 'startTime',
  endTime: 'endTime',
  purpose: 'purpose',
  status: 'status',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  registrationNo: 'registrationNo',
  type: 'type',
  capacity: 'capacity',
  driverId: 'driverId',
  attendantId: 'attendantId',
  status: 'status',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.RouteScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  startPoint: 'startPoint',
  endPoint: 'endPoint',
  distance: 'distance',
  vehicleId: 'vehicleId',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.RouteStopScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  routeId: 'routeId',
  name: 'name',
  sequence: 'sequence',
  arrivalTime: 'arrivalTime',
  departureTime: 'departureTime',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TripScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  routeId: 'routeId',
  vehicleId: 'vehicleId',
  tripType: 'tripType',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  tripDate: 'tripDate',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.StudentTransportScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  studentId: 'studentId',
  routeId: 'routeId',
  stopId: 'stopId',
  pickupTime: 'pickupTime',
  dropoffTime: 'dropoffTime',
  fee: 'fee',
  status: 'status',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TransportAttendanceScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  studentTransportId: 'studentTransportId',
  tripId: 'tripId',
  date: 'date',
  status: 'status',
  remarks: 'remarks',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.NoticeScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  title: 'title',
  content: 'content',
  startDate: 'startDate',
  endDate: 'endDate',
  isPublished: 'isPublished',
  priority: 'priority',
  targetRoles: 'targetRoles',
  classIds: 'classIds',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  title: 'title',
  description: 'description',
  startDateTime: 'startDateTime',
  endDateTime: 'endDateTime',
  location: 'location',
  isPublished: 'isPublished',
  targetRoles: 'targetRoles',
  classIds: 'classIds',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  type: 'type',
  isActive: 'isActive',
  isArchived: 'isArchived',
  isPinned: 'isPinned',
  isMuted: 'isMuted',
  isEncrypted: 'isEncrypted',
  encryptionType: 'encryptionType',
  encryptionKey: 'encryptionKey',
  lastMessageAt: 'lastMessageAt',
  lastMessageId: 'lastMessageId',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ConversationParticipantScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  conversationId: 'conversationId',
  userId: 'userId',
  role: 'role',
  permissions: 'permissions',
  isActive: 'isActive',
  isMuted: 'isMuted',
  isPinned: 'isPinned',
  lastReadAt: 'lastReadAt',
  lastReadMessageId: 'lastReadMessageId',
  joinedAt: 'joinedAt',
  leftAt: 'leftAt',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  senderId: 'senderId',
  receiverId: 'receiverId',
  subject: 'subject',
  content: 'content',
  isRead: 'isRead',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  aiAnalysis: 'aiAnalysis',
  contentEncrypted: 'contentEncrypted',
  contentHtml: 'contentHtml',
  contentMarkdown: 'contentMarkdown',
  conversationId: 'conversationId',
  createdBy: 'createdBy',
  deliveredAt: 'deliveredAt',
  editedAt: 'editedAt',
  encryptionKey: 'encryptionKey',
  encryptionType: 'encryptionType',
  hashtags: 'hashtags',
  isArchived: 'isArchived',
  isDeleted: 'isDeleted',
  isEdited: 'isEdited',
  isEncrypted: 'isEncrypted',
  isForwarded: 'isForwarded',
  isPinned: 'isPinned',
  language: 'language',
  links: 'links',
  mentions: 'mentions',
  metadata: 'metadata',
  priority: 'priority',
  readAt: 'readAt',
  replyToId: 'replyToId',
  scheduledAt: 'scheduledAt',
  sentiment: 'sentiment',
  status: 'status',
  tags: 'tags',
  threadId: 'threadId',
  type: 'type',
  updatedBy: 'updatedBy'
};

exports.Prisma.MessageThreadScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  conversationId: 'conversationId',
  rootMessageId: 'rootMessageId',
  title: 'title',
  description: 'description',
  isActive: 'isActive',
  isPinned: 'isPinned',
  isArchived: 'isArchived',
  participantCount: 'participantCount',
  messageCount: 'messageCount',
  lastMessageAt: 'lastMessageAt',
  lastMessageId: 'lastMessageId',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.MessageAttachmentScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  messageId: 'messageId',
  conversationId: 'conversationId',
  name: 'name',
  originalName: 'originalName',
  path: 'path',
  url: 'url',
  mimeType: 'mimeType',
  size: 'size',
  type: 'type',
  isEncrypted: 'isEncrypted',
  encryptionKey: 'encryptionKey',
  metadata: 'metadata',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.MessageReactionScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  messageId: 'messageId',
  userId: 'userId',
  reaction: 'reaction',
  metadata: 'metadata',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageForwardScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  originalMessageId: 'originalMessageId',
  forwardedMessageId: 'forwardedMessageId',
  forwardedByUserId: 'forwardedByUserId',
  forwardedToUserId: 'forwardedToUserId',
  forwardedAt: 'forwardedAt',
  metadata: 'metadata',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  messageId: 'messageId'
};

exports.Prisma.MessagePollScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  conversationId: 'conversationId',
  question: 'question',
  options: 'options',
  votes: 'votes',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationSettingScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  conversationId: 'conversationId',
  key: 'key',
  value: 'value',
  metadata: 'metadata',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageNotificationScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  messageId: 'messageId',
  userId: 'userId',
  type: 'type',
  title: 'title',
  body: 'body',
  isRead: 'isRead',
  readAt: 'readAt',
  metadata: 'metadata',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationNotificationScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  conversationId: 'conversationId',
  userId: 'userId',
  type: 'type',
  title: 'title',
  body: 'body',
  isRead: 'isRead',
  readAt: 'readAt',
  metadata: 'metadata',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageAnalyticsScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  messageId: 'messageId',
  conversationId: 'conversationId',
  userId: 'userId',
  action: 'action',
  metadata: 'metadata',
  schoolId: 'schoolId',
  createdAt: 'createdAt'
};

exports.Prisma.ConversationAnalyticsScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  conversationId: 'conversationId',
  userId: 'userId',
  action: 'action',
  metadata: 'metadata',
  schoolId: 'schoolId',
  createdAt: 'createdAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  title: 'title',
  description: 'description',
  type: 'type',
  path: 'path',
  mimeType: 'mimeType',
  size: 'size',
  studentId: 'studentId',
  teacherId: 'teacherId',
  staffId: 'staffId',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  customerId: 'customerId'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  oldData: 'oldData',
  newData: 'newData',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  ownerId: 'ownerId',
  schoolId: 'schoolId',
  userId: 'userId',
  createdAt: 'createdAt',
  customerId: 'customerId'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  token: 'token',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  expiresAt: 'expiresAt',
  ownerId: 'ownerId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  refreshToken: 'refreshToken',
  status: 'status',
  deviceType: 'deviceType'
};

exports.Prisma.SystemSettingScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  key: 'key',
  value: 'value',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SchoolSettingScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  key: 'key',
  value: 'value',
  isPublic: 'isPublic',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AssignmentScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  title: 'title',
  description: 'description',
  dueDate: 'dueDate',
  maxScore: 'maxScore',
  classId: 'classId',
  subjectId: 'subjectId',
  teacherId: 'teacherId',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AssignmentAttachmentScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  assignmentId: 'assignmentId',
  name: 'name',
  path: 'path',
  mimeType: 'mimeType',
  size: 'size',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AssignmentSubmissionScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  assignmentId: 'assignmentId',
  studentId: 'studentId',
  submittedAt: 'submittedAt',
  score: 'score',
  feedback: 'feedback',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SubmissionAttachmentScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  submissionId: 'submissionId',
  name: 'name',
  path: 'path',
  mimeType: 'mimeType',
  size: 'size',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  action: 'action',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  scope: 'scope',
  conditions: 'conditions',
  isActive: 'isActive',
  isSystem: 'isSystem',
  metadata: 'metadata',
  schoolId: 'schoolId',
  ownerId: 'ownerId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  type: 'type',
  isActive: 'isActive',
  isSystem: 'isSystem',
  isDefault: 'isDefault',
  priority: 'priority',
  metadata: 'metadata',
  schoolId: 'schoolId',
  ownerId: 'ownerId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  permissionId: 'permissionId',
  isGranted: 'isGranted',
  conditions: 'conditions',
  expiresAt: 'expiresAt',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.RoleInheritanceScalarFieldEnum = {
  id: 'id',
  inheritingRoleId: 'inheritingRoleId',
  parentRoleId: 'parentRoleId',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.UserPermissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permissionId: 'permissionId',
  isGranted: 'isGranted',
  conditions: 'conditions',
  expiresAt: 'expiresAt',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.UserRoleAssignmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  isActive: 'isActive',
  assignedAt: 'assignedAt',
  expiresAt: 'expiresAt',
  assignedBy: 'assignedBy',
  metadata: 'metadata'
};

exports.Prisma.AccessControlListScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  action: 'action',
  principalType: 'principalType',
  principalId: 'principalId',
  isGranted: 'isGranted',
  conditions: 'conditions',
  expiresAt: 'expiresAt',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionGroupScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  isSystem: 'isSystem',
  metadata: 'metadata',
  schoolId: 'schoolId',
  ownerId: 'ownerId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PermissionGroupItemScalarFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  permissionId: 'permissionId',
  isGranted: 'isGranted',
  conditions: 'conditions',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.FrontendComponentScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  path: 'path',
  component: 'component',
  description: 'description',
  category: 'category',
  isActive: 'isActive',
  isSystem: 'isSystem',
  metadata: 'metadata',
  schoolId: 'schoolId',
  ownerId: 'ownerId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ComponentPermissionScalarFieldEnum = {
  id: 'id',
  componentId: 'componentId',
  roleId: 'roleId',
  userId: 'userId',
  permission: 'permission',
  isGranted: 'isGranted',
  conditions: 'conditions',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.PolicyScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  isSystem: 'isSystem',
  conditions: 'conditions',
  effect: 'effect',
  metadata: 'metadata',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PolicyAssignmentScalarFieldEnum = {
  id: 'id',
  policyId: 'policyId',
  principalType: 'principalType',
  principalId: 'principalId',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  isActive: 'isActive',
  assignedBy: 'assignedBy',
  assignedAt: 'assignedAt',
  expiresAt: 'expiresAt',
  metadata: 'metadata'
};

exports.Prisma.AttributeRuleScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  isSystem: 'isSystem',
  targetType: 'targetType',
  attribute: 'attribute',
  operator: 'operator',
  value: 'value',
  effect: 'effect',
  metadata: 'metadata',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AttributeAssignmentScalarFieldEnum = {
  id: 'id',
  attributeRuleId: 'attributeRuleId',
  principalType: 'principalType',
  principalId: 'principalId',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  isActive: 'isActive',
  assignedBy: 'assignedBy',
  assignedAt: 'assignedAt',
  expiresAt: 'expiresAt',
  metadata: 'metadata'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  serialNumber: 'serialNumber',
  email: 'email',
  phone: 'phone',
  gender: 'gender',
  source: 'source',
  purpose: 'purpose',
  department: 'department',
  referredTo: 'referredTo',
  referredById: 'referredById',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  ownerId: 'ownerId',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  userId: 'userId',
  totalSpent: 'totalSpent',
  orderCount: 'orderCount',
  type: 'type',
  pipelineStageId: 'pipelineStageId',
  rermark: 'rermark',
  priority: 'priority'
};

exports.Prisma.CustomerPipelineStageScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  order: 'order',
  description: 'description',
  color: 'color',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.CustomerEventScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  customerId: 'customerId',
  eventType: 'eventType',
  title: 'title',
  description: 'description',
  metadata: 'metadata',
  severity: 'severity',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentEventScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  studentId: 'studentId',
  eventType: 'eventType',
  title: 'title',
  description: 'description',
  metadata: 'metadata',
  severity: 'severity',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  type: 'type',
  title: 'title',
  message: 'message',
  summary: 'summary',
  priority: 'priority',
  status: 'status',
  metadata: 'metadata',
  actions: 'actions',
  expiresAt: 'expiresAt',
  scheduledAt: 'scheduledAt',
  entityType: 'entityType',
  entityId: 'entityId',
  entityAction: 'entityAction',
  senderId: 'senderId',
  schoolId: 'schoolId',
  ownerId: 'ownerId',
  templateKey: 'templateKey',
  templateData: 'templateData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.NotificationRecipientScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  notificationId: 'notificationId',
  userId: 'userId',
  channel: 'channel',
  status: 'status',
  readAt: 'readAt',
  deliveredAt: 'deliveredAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationAttachmentScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  notificationId: 'notificationId',
  name: 'name',
  url: 'url',
  type: 'type',
  size: 'size',
  mimeType: 'mimeType',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationDeliveryScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  notificationId: 'notificationId',
  channel: 'channel',
  status: 'status',
  attemptCount: 'attemptCount',
  deliveredAt: 'deliveredAt',
  errorMessage: 'errorMessage',
  gatewayResponse: 'gatewayResponse',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationTemplateScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  key: 'key',
  name: 'name',
  description: 'description',
  type: 'type',
  subject: 'subject',
  body: 'body',
  htmlBody: 'htmlBody',
  variables: 'variables',
  isActive: 'isActive',
  isSystem: 'isSystem',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.NotificationRuleScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  entityType: 'entityType',
  eventType: 'eventType',
  conditions: 'conditions',
  templateKey: 'templateKey',
  channels: 'channels',
  recipients: 'recipients',
  isActive: 'isActive',
  isSystem: 'isSystem',
  schoolId: 'schoolId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PermissionAssignmentScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  userId: 'userId',
  roleId: 'roleId',
  groupId: 'groupId',
  permissionId: 'permissionId',
  scope: 'scope',
  resource: 'resource',
  action: 'action',
  conditions: 'conditions',
  priority: 'priority',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  assignedBy: 'assignedBy',
  assignedAt: 'assignedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GroupScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  type: 'type',
  isActive: 'isActive',
  metadata: 'metadata',
  schoolId: 'schoolId',
  ownerId: 'ownerId',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ClassToSubjectScalarFieldEnum = {
  A: 'A',
  B: 'B'
};

exports.Prisma.GroupToUserScalarFieldEnum = {
  A: 'A',
  B: 'B'
};

exports.Prisma.Participant_lastReadMessageScalarFieldEnum = {
  A: 'A',
  B: 'B'
};

exports.Prisma.SubjectToTeacherScalarFieldEnum = {
  A: 'A',
  B: 'B'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.OwnerOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  email: 'email',
  phone: 'phone',
  password: 'password',
  salt: 'salt',
  lastIp: 'lastIp',
  timezone: 'timezone',
  locale: 'locale',
  metadata: 'metadata'
};

exports.Prisma.SchoolOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  shortName: 'shortName',
  code: 'code',
  motto: 'motto',
  about: 'about',
  email: 'email',
  phone: 'phone',
  fax: 'fax',
  website: 'website',
  principal: 'principal',
  vicePrincipal: 'vicePrincipal',
  country: 'country',
  state: 'state',
  city: 'city',
  address: 'address',
  postalCode: 'postalCode',
  logo: 'logo',
  coverImage: 'coverImage',
  themeColor: 'themeColor',
  timezone: 'timezone',
  locale: 'locale',
  currency: 'currency'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  username: 'username',
  email: 'email',
  phone: 'phone',
  password: 'password',
  salt: 'salt',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  displayName: 'displayName',
  avatar: 'avatar',
  coverImage: 'coverImage',
  bio: 'bio',
  lastIp: 'lastIp',
  timezone: 'timezone',
  locale: 'locale',
  metadata: 'metadata'
};

exports.Prisma.AcademicSessionOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description'
};

exports.Prisma.TermOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name'
};

exports.Prisma.DepartmentOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  code: 'code',
  description: 'description'
};

exports.Prisma.ClassOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  code: 'code',
  section: 'section',
  roomNumber: 'roomNumber'
};

exports.Prisma.SubjectOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  code: 'code',
  description: 'description'
};

exports.Prisma.TimetableOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  roomNumber: 'roomNumber'
};

exports.Prisma.TeacherOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  employeeId: 'employeeId',
  qualification: 'qualification',
  specialization: 'specialization'
};

exports.Prisma.StudentOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  admissionNo: 'admissionNo',
  rollNo: 'rollNo',
  bloodGroup: 'bloodGroup',
  nationality: 'nationality',
  religion: 'religion',
  caste: 'caste',
  aadharNo: 'aadharNo',
  bankAccountNo: 'bankAccountNo',
  bankName: 'bankName',
  ifscCode: 'ifscCode',
  previousSchool: 'previousSchool'
};

exports.Prisma.ParentOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  occupation: 'occupation',
  education: 'education'
};

exports.Prisma.StaffOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  employeeId: 'employeeId',
  designation: 'designation',
  accountNumber: 'accountNumber',
  bankName: 'bankName',
  ifscCode: 'ifscCode'
};

exports.Prisma.SectionOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  roomNumber: 'roomNumber'
};

exports.Prisma.ExamOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  code: 'code',
  description: 'description'
};

exports.Prisma.GradeOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  grade: 'grade',
  remarks: 'remarks'
};

exports.Prisma.ExamTimetableOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  roomNumber: 'roomNumber'
};

exports.Prisma.AttendanceOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  remarks: 'remarks'
};

exports.Prisma.FeeStructureOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description'
};

exports.Prisma.FeeItemOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  transactionId: 'transactionId',
  remarks: 'remarks'
};

exports.Prisma.PaymentItemOrderByRelevanceFieldEnum = {
  uuid: 'uuid'
};

exports.Prisma.PayrollOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  transactionId: 'transactionId',
  remarks: 'remarks'
};

exports.Prisma.BookOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  title: 'title',
  author: 'author',
  isbn: 'isbn',
  publisher: 'publisher',
  edition: 'edition',
  shelfNumber: 'shelfNumber'
};

exports.Prisma.BookIssueOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  remarks: 'remarks',
  status: 'status'
};

exports.Prisma.InventoryCategoryOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description'
};

exports.Prisma.InventoryItemOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  location: 'location',
  supplier: 'supplier',
  unit: 'unit'
};

exports.Prisma.InventoryLogOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  referenceType: 'referenceType',
  remarks: 'remarks',
  type: 'type'
};

exports.Prisma.IncomeOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  description: 'description',
  source: 'source'
};

exports.Prisma.FacilityOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  type: 'type',
  location: 'location',
  description: 'description',
  status: 'status'
};

exports.Prisma.FacilityBookingOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  purpose: 'purpose',
  status: 'status'
};

exports.Prisma.VehicleOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  registrationNo: 'registrationNo',
  type: 'type',
  status: 'status'
};

exports.Prisma.RouteOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  startPoint: 'startPoint',
  endPoint: 'endPoint'
};

exports.Prisma.RouteStopOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name'
};

exports.Prisma.TripOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  tripType: 'tripType',
  status: 'status'
};

exports.Prisma.StudentTransportOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  status: 'status'
};

exports.Prisma.TransportAttendanceOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  remarks: 'remarks'
};

exports.Prisma.NoticeOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  title: 'title',
  content: 'content',
  priority: 'priority',
  targetRoles: 'targetRoles',
  classIds: 'classIds'
};

exports.Prisma.EventOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  title: 'title',
  description: 'description',
  location: 'location',
  targetRoles: 'targetRoles',
  classIds: 'classIds'
};

exports.Prisma.ConversationOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  encryptionKey: 'encryptionKey'
};

exports.Prisma.ConversationParticipantOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  role: 'role',
  permissions: 'permissions'
};

exports.Prisma.MessageOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  subject: 'subject',
  content: 'content',
  aiAnalysis: 'aiAnalysis',
  contentEncrypted: 'contentEncrypted',
  contentHtml: 'contentHtml',
  contentMarkdown: 'contentMarkdown',
  encryptionKey: 'encryptionKey',
  hashtags: 'hashtags',
  language: 'language',
  links: 'links',
  mentions: 'mentions',
  metadata: 'metadata',
  sentiment: 'sentiment',
  tags: 'tags'
};

exports.Prisma.MessageThreadOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  title: 'title',
  description: 'description'
};

exports.Prisma.MessageAttachmentOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  originalName: 'originalName',
  path: 'path',
  url: 'url',
  mimeType: 'mimeType',
  encryptionKey: 'encryptionKey',
  metadata: 'metadata'
};

exports.Prisma.MessageReactionOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  metadata: 'metadata'
};

exports.Prisma.MessageForwardOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  metadata: 'metadata'
};

exports.Prisma.MessagePollOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  question: 'question',
  options: 'options',
  votes: 'votes'
};

exports.Prisma.ConversationSettingOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  key: 'key',
  value: 'value',
  metadata: 'metadata'
};

exports.Prisma.MessageNotificationOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  type: 'type',
  title: 'title',
  body: 'body',
  metadata: 'metadata'
};

exports.Prisma.ConversationNotificationOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  type: 'type',
  title: 'title',
  body: 'body',
  metadata: 'metadata'
};

exports.Prisma.MessageAnalyticsOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  action: 'action',
  metadata: 'metadata'
};

exports.Prisma.ConversationAnalyticsOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  action: 'action',
  metadata: 'metadata'
};

exports.Prisma.DocumentOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  title: 'title',
  description: 'description',
  path: 'path',
  mimeType: 'mimeType'
};

exports.Prisma.AuditLogOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  action: 'action',
  entityType: 'entityType',
  oldData: 'oldData',
  newData: 'newData',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  token: 'token',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  refreshToken: 'refreshToken',
  status: 'status',
  deviceType: 'deviceType'
};

exports.Prisma.SystemSettingOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  key: 'key',
  value: 'value'
};

exports.Prisma.SchoolSettingOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  key: 'key',
  value: 'value'
};

exports.Prisma.AssignmentOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  title: 'title',
  description: 'description'
};

exports.Prisma.AssignmentAttachmentOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  path: 'path',
  mimeType: 'mimeType'
};

exports.Prisma.AssignmentSubmissionOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  feedback: 'feedback'
};

exports.Prisma.SubmissionAttachmentOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  path: 'path',
  mimeType: 'mimeType'
};

exports.Prisma.PermissionOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  resourceId: 'resourceId',
  conditions: 'conditions',
  metadata: 'metadata'
};

exports.Prisma.RoleOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  metadata: 'metadata'
};

exports.Prisma.RolePermissionOrderByRelevanceFieldEnum = {
  conditions: 'conditions'
};

exports.Prisma.UserPermissionOrderByRelevanceFieldEnum = {
  conditions: 'conditions'
};

exports.Prisma.UserRoleAssignmentOrderByRelevanceFieldEnum = {
  metadata: 'metadata'
};

exports.Prisma.AccessControlListOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  resourceId: 'resourceId',
  principalType: 'principalType',
  conditions: 'conditions'
};

exports.Prisma.PermissionGroupOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  metadata: 'metadata'
};

exports.Prisma.PermissionGroupItemOrderByRelevanceFieldEnum = {
  conditions: 'conditions'
};

exports.Prisma.FrontendComponentOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  path: 'path',
  component: 'component',
  description: 'description',
  category: 'category',
  metadata: 'metadata'
};

exports.Prisma.ComponentPermissionOrderByRelevanceFieldEnum = {
  permission: 'permission',
  conditions: 'conditions'
};

exports.Prisma.PolicyOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  conditions: 'conditions',
  effect: 'effect',
  metadata: 'metadata'
};

exports.Prisma.PolicyAssignmentOrderByRelevanceFieldEnum = {
  principalType: 'principalType',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  metadata: 'metadata'
};

exports.Prisma.AttributeRuleOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  targetType: 'targetType',
  attribute: 'attribute',
  operator: 'operator',
  value: 'value',
  effect: 'effect',
  metadata: 'metadata'
};

exports.Prisma.AttributeAssignmentOrderByRelevanceFieldEnum = {
  principalType: 'principalType',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  metadata: 'metadata'
};

exports.Prisma.CustomerOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  serialNumber: 'serialNumber',
  email: 'email',
  phone: 'phone',
  gender: 'gender',
  source: 'source',
  purpose: 'purpose',
  department: 'department',
  referredTo: 'referredTo',
  metadata: 'metadata',
  type: 'type',
  rermark: 'rermark',
  priority: 'priority'
};

exports.Prisma.CustomerPipelineStageOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  color: 'color'
};

exports.Prisma.CustomerEventOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  eventType: 'eventType',
  title: 'title',
  description: 'description',
  metadata: 'metadata',
  severity: 'severity'
};

exports.Prisma.StudentEventOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  eventType: 'eventType',
  title: 'title',
  description: 'description',
  metadata: 'metadata',
  severity: 'severity'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  type: 'type',
  title: 'title',
  message: 'message',
  summary: 'summary',
  priority: 'priority',
  status: 'status',
  metadata: 'metadata',
  actions: 'actions',
  entityType: 'entityType',
  entityAction: 'entityAction',
  templateKey: 'templateKey',
  templateData: 'templateData'
};

exports.Prisma.NotificationRecipientOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  channel: 'channel',
  status: 'status',
  metadata: 'metadata'
};

exports.Prisma.NotificationAttachmentOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  url: 'url',
  type: 'type',
  mimeType: 'mimeType',
  description: 'description'
};

exports.Prisma.NotificationDeliveryOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  channel: 'channel',
  status: 'status',
  errorMessage: 'errorMessage',
  gatewayResponse: 'gatewayResponse',
  metadata: 'metadata'
};

exports.Prisma.NotificationTemplateOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  key: 'key',
  name: 'name',
  description: 'description',
  type: 'type',
  subject: 'subject',
  body: 'body',
  htmlBody: 'htmlBody',
  variables: 'variables'
};

exports.Prisma.NotificationRuleOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  entityType: 'entityType',
  eventType: 'eventType',
  conditions: 'conditions',
  templateKey: 'templateKey',
  channels: 'channels',
  recipients: 'recipients'
};

exports.Prisma.PermissionAssignmentOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  scope: 'scope',
  resource: 'resource',
  action: 'action',
  conditions: 'conditions'
};

exports.Prisma.GroupOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  description: 'description',
  type: 'type',
  metadata: 'metadata'
};
exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  GRADUATED: 'GRADUATED',
  TRANSFERRED: 'TRANSFERRED'
};

exports.SchoolStatus = exports.$Enums.SchoolStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PENDING: 'PENDING',
  SUSPENDED: 'SUSPENDED'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

exports.UserRole = exports.$Enums.UserRole = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  SCHOOL_ADMIN: 'SCHOOL_ADMIN',
  TEACHER: 'TEACHER',
  STUDENT: 'STUDENT',
  STAFF: 'STAFF',
  PARENT: 'PARENT',
  ACCOUNTANT: 'ACCOUNTANT',
  LIBRARIAN: 'LIBRARIAN',
  CRM_MANAGER: 'CRM_MANAGER'
};

exports.TermType = exports.$Enums.TermType = {
  FIRST_TERM: 'FIRST_TERM',
  SECOND_TERM: 'SECOND_TERM',
  THIRD_TERM: 'THIRD_TERM',
  SUMMER: 'SUMMER',
  WINTER: 'WINTER'
};

exports.ExamType = exports.$Enums.ExamType = {
  MIDTERM: 'MIDTERM',
  FINAL: 'FINAL',
  QUIZ: 'QUIZ',
  ASSIGNMENT: 'ASSIGNMENT',
  PROJECT: 'PROJECT',
  PRACTICAL: 'PRACTICAL'
};

exports.AttendanceStatus = exports.$Enums.AttendanceStatus = {
  PRESENT: 'PRESENT',
  ABSENT: 'ABSENT',
  LATE: 'LATE',
  EXCUSED: 'EXCUSED',
  HALF_DAY: 'HALF_DAY'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PAID: 'PAID',
  UNPAID: 'UNPAID',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CARD: 'CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  MOBILE_PAYMENT: 'MOBILE_PAYMENT',
  CHECK: 'CHECK',
  SCHOLARSHIP: 'SCHOLARSHIP'
};

exports.ConversationType = exports.$Enums.ConversationType = {
  DIRECT: 'DIRECT',
  GROUP: 'GROUP',
  CHANNEL: 'CHANNEL',
  BROADCAST: 'BROADCAST',
  ANNOUNCEMENT: 'ANNOUNCEMENT',
  SUPPORT: 'SUPPORT',
  MODERATION: 'MODERATION'
};

exports.EncryptionType = exports.$Enums.EncryptionType = {
  NONE: 'NONE',
  AES_256: 'AES_256',
  END_TO_END: 'END_TO_END',
  ENTERPRISE: 'ENTERPRISE',
  QUANTUM_SAFE: 'QUANTUM_SAFE'
};

exports.MessagePriority = exports.$Enums.MessagePriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT',
  CRITICAL: 'CRITICAL'
};

exports.MessageStatus = exports.$Enums.MessageStatus = {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ',
  FAILED: 'FAILED',
  PENDING: 'PENDING',
  SCHEDULED: 'SCHEDULED',
  CANCELLED: 'CANCELLED',
  ARCHIVED: 'ARCHIVED',
  DELETED: 'DELETED'
};

exports.MessageType = exports.$Enums.MessageType = {
  DIRECT: 'DIRECT',
  GROUP: 'GROUP',
  BROADCAST: 'BROADCAST',
  ANNOUNCEMENT: 'ANNOUNCEMENT',
  SYSTEM: 'SYSTEM',
  NOTIFICATION: 'NOTIFICATION',
  ALERT: 'ALERT',
  REMINDER: 'REMINDER',
  SCHEDULED: 'SCHEDULED',
  ENCRYPTED: 'ENCRYPTED',
  VOICE: 'VOICE',
  VIDEO: 'VIDEO',
  FILE: 'FILE',
  LOCATION: 'LOCATION',
  POLL: 'POLL',
  REACTION: 'REACTION',
  THREAD: 'THREAD',
  REPLY: 'REPLY',
  FORWARD: 'FORWARD',
  ARCHIVE: 'ARCHIVE'
};

exports.AttachmentType = exports.$Enums.AttachmentType = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  DOCUMENT: 'DOCUMENT',
  PDF: 'PDF',
  SPREADSHEET: 'SPREADSHEET',
  PRESENTATION: 'PRESENTATION',
  ARCHIVE: 'ARCHIVE',
  LOCATION: 'LOCATION',
  CONTACT: 'CONTACT',
  CALENDAR: 'CALENDAR',
  CODE: 'CODE',
  OTHER: 'OTHER'
};

exports.MessageReactionType = exports.$Enums.MessageReactionType = {
  LIKE: 'LIKE',
  LOVE: 'LOVE',
  HAHA: 'HAHA',
  WOW: 'WOW',
  SAD: 'SAD',
  ANGRY: 'ANGRY',
  THUMBS_UP: 'THUMBS_UP',
  THUMBS_DOWN: 'THUMBS_DOWN',
  CLAP: 'CLAP',
  HEART: 'HEART',
  FIRE: 'FIRE',
  ROCKET: 'ROCKET',
  EYES: 'EYES',
  PRAY: 'PRAY',
  CELEBRATE: 'CELEBRATE'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  ID_PROOF: 'ID_PROOF',
  ADDRESS_PROOF: 'ADDRESS_PROOF',
  BIRTH_CERTIFICATE: 'BIRTH_CERTIFICATE',
  TRANSFER_CERTIFICATE: 'TRANSFER_CERTIFICATE',
  MARKSHEET: 'MARKSHEET',
  PHOTOGRAPH: 'PHOTOGRAPH',
  MEDICAL_CERTIFICATE: 'MEDICAL_CERTIFICATE',
  OTHER: 'OTHER'
};

exports.PermissionAction = exports.$Enums.PermissionAction = {
  CREATE: 'CREATE',
  READ: 'READ',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  APPROVE: 'APPROVE',
  REJECT: 'REJECT',
  EXPORT: 'EXPORT',
  IMPORT: 'IMPORT',
  BULK_OPERATION: 'BULK_OPERATION',
  VIEW_REPORTS: 'VIEW_REPORTS',
  MANAGE_USERS: 'MANAGE_USERS',
  MANAGE_ROLES: 'MANAGE_ROLES',
  MANAGE_PERMISSIONS: 'MANAGE_PERMISSIONS',
  SYSTEM_ADMIN: 'SYSTEM_ADMIN'
};

exports.ResourceType = exports.$Enums.ResourceType = {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  CLASS: 'CLASS',
  SUBJECT: 'SUBJECT',
  EXAM: 'EXAM',
  GRADE: 'GRADE',
  ATTENDANCE: 'ATTENDANCE',
  ASSIGNMENT: 'ASSIGNMENT',
  ACADEMIC_SESSION: 'ACADEMIC_SESSION',
  TERM: 'TERM',
  SECTION: 'SECTION',
  DEPARTMENT: 'DEPARTMENT',
  PAYMENT: 'PAYMENT',
  FEE_STRUCTURE: 'FEE_STRUCTURE',
  FEE_ITEM: 'FEE_ITEM',
  REFUND: 'REFUND',
  INSTALLMENT: 'INSTALLMENT',
  PAYROLL: 'PAYROLL',
  INCOME: 'INCOME',
  BILL: 'BILL',
  USER: 'USER',
  ROLE: 'ROLE',
  PERMISSION: 'PERMISSION',
  SCHOOL: 'SCHOOL',
  OWNER: 'OWNER',
  STAFF: 'STAFF',
  PARENT: 'PARENT',
  ACCOUNTANT: 'ACCOUNTANT',
  LIBRARIAN: 'LIBRARIAN',
  BOOK: 'BOOK',
  BOOK_ISSUE: 'BOOK_ISSUE',
  BOOK_RESERVATION: 'BOOK_RESERVATION',
  BOOK_REVIEW: 'BOOK_REVIEW',
  INVENTORY_ITEM: 'INVENTORY_ITEM',
  INVENTORY_CATEGORY: 'INVENTORY_CATEGORY',
  INVENTORY_SUPPLIER: 'INVENTORY_SUPPLIER',
  PURCHASE_ORDER: 'PURCHASE_ORDER',
  INVENTORY_LOG: 'INVENTORY_LOG',
  INVENTORY_MAINTENANCE: 'INVENTORY_MAINTENANCE',
  VEHICLE: 'VEHICLE',
  ROUTE: 'ROUTE',
  TRIP: 'TRIP',
  STUDENT_TRANSPORT: 'STUDENT_TRANSPORT',
  TRANSPORT_ATTENDANCE: 'TRANSPORT_ATTENDANCE',
  FACILITY: 'FACILITY',
  FACILITY_BOOKING: 'FACILITY_BOOKING',
  NOTICE: 'NOTICE',
  EVENT: 'EVENT',
  MESSAGE: 'MESSAGE',
  NOTIFICATION: 'NOTIFICATION',
  DOCUMENT: 'DOCUMENT',
  CUSTOMER: 'CUSTOMER',
  CUSTOMER_PIPELINE: 'CUSTOMER_PIPELINE',
  SYSTEM_SETTING: 'SYSTEM_SETTING',
  SCHOOL_SETTING: 'SCHOOL_SETTING',
  AUDIT_LOG: 'AUDIT_LOG',
  FILE: 'FILE',
  TIMETABLE: 'TIMETABLE',
  TIMETABLE_VERSION: 'TIMETABLE_VERSION',
  DASHBOARD: 'DASHBOARD',
  REPORTS: 'REPORTS',
  ANALYTICS: 'ANALYTICS',
  SETTINGS: 'SETTINGS',
  PROFILE: 'PROFILE',
  NOTIFICATIONS: 'NOTIFICATIONS',
  HELP: 'HELP',
  ABOUT: 'ABOUT'
};

exports.PermissionScope = exports.$Enums.PermissionScope = {
  OWN: 'OWN',
  SCHOOL: 'SCHOOL',
  ALL: 'ALL',
  CUSTOM: 'CUSTOM'
};

exports.Prisma.ModelName = {
  Owner: 'Owner',
  School: 'School',
  User: 'User',
  AcademicSession: 'AcademicSession',
  Term: 'Term',
  Department: 'Department',
  Class: 'Class',
  Subject: 'Subject',
  Timetable: 'Timetable',
  Teacher: 'Teacher',
  Student: 'Student',
  Parent: 'Parent',
  Staff: 'Staff',
  Section: 'Section',
  Exam: 'Exam',
  Grade: 'Grade',
  ExamTimetable: 'ExamTimetable',
  Attendance: 'Attendance',
  FeeStructure: 'FeeStructure',
  FeeItem: 'FeeItem',
  Payment: 'Payment',
  PaymentItem: 'PaymentItem',
  Payroll: 'Payroll',
  Book: 'Book',
  BookIssue: 'BookIssue',
  InventoryCategory: 'InventoryCategory',
  InventoryItem: 'InventoryItem',
  InventoryLog: 'InventoryLog',
  Income: 'Income',
  Facility: 'Facility',
  FacilityBooking: 'FacilityBooking',
  Vehicle: 'Vehicle',
  Route: 'Route',
  RouteStop: 'RouteStop',
  Trip: 'Trip',
  StudentTransport: 'StudentTransport',
  TransportAttendance: 'TransportAttendance',
  Notice: 'Notice',
  Event: 'Event',
  Conversation: 'Conversation',
  ConversationParticipant: 'ConversationParticipant',
  Message: 'Message',
  MessageThread: 'MessageThread',
  MessageAttachment: 'MessageAttachment',
  MessageReaction: 'MessageReaction',
  MessageForward: 'MessageForward',
  MessagePoll: 'MessagePoll',
  ConversationSetting: 'ConversationSetting',
  MessageNotification: 'MessageNotification',
  ConversationNotification: 'ConversationNotification',
  MessageAnalytics: 'MessageAnalytics',
  ConversationAnalytics: 'ConversationAnalytics',
  Document: 'Document',
  AuditLog: 'AuditLog',
  Session: 'Session',
  SystemSetting: 'SystemSetting',
  SchoolSetting: 'SchoolSetting',
  Assignment: 'Assignment',
  AssignmentAttachment: 'AssignmentAttachment',
  AssignmentSubmission: 'AssignmentSubmission',
  SubmissionAttachment: 'SubmissionAttachment',
  Permission: 'Permission',
  Role: 'Role',
  RolePermission: 'RolePermission',
  RoleInheritance: 'RoleInheritance',
  UserPermission: 'UserPermission',
  UserRoleAssignment: 'UserRoleAssignment',
  AccessControlList: 'AccessControlList',
  PermissionGroup: 'PermissionGroup',
  PermissionGroupItem: 'PermissionGroupItem',
  FrontendComponent: 'FrontendComponent',
  ComponentPermission: 'ComponentPermission',
  Policy: 'Policy',
  PolicyAssignment: 'PolicyAssignment',
  AttributeRule: 'AttributeRule',
  AttributeAssignment: 'AttributeAssignment',
  Customer: 'Customer',
  CustomerPipelineStage: 'CustomerPipelineStage',
  CustomerEvent: 'CustomerEvent',
  StudentEvent: 'StudentEvent',
  Notification: 'Notification',
  NotificationRecipient: 'NotificationRecipient',
  NotificationAttachment: 'NotificationAttachment',
  NotificationDelivery: 'NotificationDelivery',
  NotificationTemplate: 'NotificationTemplate',
  NotificationRule: 'NotificationRule',
  PermissionAssignment: 'PermissionAssignment',
  Group: 'Group',
  ClassToSubject: 'ClassToSubject',
  GroupToUser: 'GroupToUser',
  Participant_lastReadMessage: 'Participant_lastReadMessage',
  SubjectToTeacher: 'SubjectToTeacher'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
